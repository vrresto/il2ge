# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: debian:buster-slim

#debug_build:
  #variables:
    #GIT_SUBMODULE_STRATEGY: recursive
  #stage: build
  #before_script:
     #- dpkg --add-architecture i386
     #- apt-get update
     #- apt-get -y --no-install-recommends install gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils make cmake wine32 wine python
  #script:
    #- mkdir build
    #- mkdir install
    #- cd build
    #- cmake -DCMAKE_INSTALL_PREFIX=../install -Dplatform=mingw -Dno_tools=1 -Denable_debug=1 ..
    #- make install
  #artifacts:
    #name: "il2ge-debug_build_$CI_JOB_ID"
    #paths:
      #- install

map_viewer_build:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: build
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     - apt-get -y --no-install-recommends install gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils make cmake wine32 wine python
  script:
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=../install -Dplatform=mingw -Dno_tools=1 -Denable_map_viewer=1 -Ddisable_il2ge=1 ..
    - make install
  artifacts:
    name: "il2ge_map_viewer-build_$CI_JOB_ID"
    paths:
      - install/map_viewer.exe

build:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     #- apt-get -y --no-install-recommends install gcc-multilib g++-multilib gcc-mingw-w64-i686 g++-mingw-w64-i686 libglfw3-dev:i386 libglm-dev:i386 libtiff-dev:i386 make cmake wine32-tools wine32 wine python
     - apt-get -y --no-install-recommends install gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils make cmake wine32 wine python zip
  script:
    #- mkdir build
    #- mkdir install
    #- cd build
    #- cmake -DCMAKE_INSTALL_PREFIX=../install -Dplatform=wine -Dno_tools=1 ..
    #- make install
    #- cd ..
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=../install -Dplatform=mingw -Dno_tools=1 ..
    - make install
    - cd ../install
    - zip "-r" "../il2ge-build_$CI_JOB_ID.zip" .
  artifacts:
    name: "il2ge-build_$CI_JOB_ID"
    paths:
      - "il2ge-build_$CI_JOB_ID".zip
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh

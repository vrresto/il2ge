# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: debian:buster-slim

build:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
     - dpkg --add-architecture i386
     - apt-get update
     - apt-get -y --no-install-recommends install gcc-multilib g++-multilib libglfw3-dev:i386 libglm-dev:i386 libtiff-dev:i386 make cmake wine32-tools wine32 wine python
  script:
    - mkdir build
    - mkdir install
    - cd build && LDFLAGS=-m32 CFLAGS=-m32 CXXFLAGS=-m32 cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_C_FLAGS=-m32 -DCMAKE_C_COMPILER=winegcc-stable -DCMAKE_CXX_COMPILER=wineg++-stable .. && make install
  artifacts:
    paths:
      - install/dinput.dll
      - install/core_wrapper.dll
      - install/il2ge
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh

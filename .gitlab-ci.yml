# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: debian:buster-slim

build:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
     - apt-get update && apt-get -y install gcc-multilib g++-multilib libglfw3-dev:i386 libglm-dev:i386 make cmake wine32-development wine-development
  script:
    - mkdir build
    - cd build && cmake -DCMAKE_C_FLAGS=-m32 -DCMAKE_C_COMPILER=wineg++ -DCMAKE_CXX_COMPILER=wineg++ .. && make
  artifacts:
    paths:
      #- build/testbed/terrain_test
      #- build/testbed/simple_test
      #- build/atmosphere_map
      #- build/curvature_map
      #- shaders
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh
